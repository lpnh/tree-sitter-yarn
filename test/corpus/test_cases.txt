=============================================================================|||
Commands
=============================================================================|||

title: Start
---
// Testing commands

<<flip Harley3 +1>>

// Commands that begin with keywords
<<toggle>>

<<settings>>

<<iffy>>

<<nulled>>

<<orion>>

<<andorian>>

<<note>>

<<isActive>>

<<returnToMainMenu>>

<<oncee>>

<<enumerated>>

<<endenumerated>>

<<cased>>

<<locality>>

<<detouring>>

// Commands with a single character
<<p>>

// Commands with punctuation
//<<!@#$%^&*()⁄€‹›ﬁﬂ‡°·‚‘-=_+>>

// Commands with colons
<<hide Collision:GermOnPorch>>

// command with replacements
<<show {1}>>

// command with variable replacement
<<declare $replacement = "1">>
<<show {$replacement}>>

// command with format trickery
// this is to test #362 doesn't come back
// this USED to boil down to an empty string
<<{0}{""}>>

// command with variable replacement and format trickery
// essentially combining the previous two
// this previously would have become <<2 2>>. now is <<2 {0}>> which is weird but allowed
<<set $replacement = "{0}">>
<<{2} {$replacement}>>

// command with variable replacement in the middle of another element
// another weird but allowed situation
<<set $replacement = "ular old co">>
<<reg{$replacement}mmand>>
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (command_statement
        (identifier)
        (identifier)
        (command_text))
      (comment)
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (command_statement
        (identifier))
      (comment)
      (command_statement
        (identifier))
      (comment)
      (comment)
      (comment)
      (command_statement
        (identifier)
        (identifier)
        (command_text))
      (comment)
      (command_statement
        (identifier)
        (number))
      (comment)
      (declare_statement
        (variable
          (identifier))
        (string))
      (command_statement
        (identifier)
        (variable
          (identifier)))
      (comment)
      (comment)
      (comment)
      (command_statement
        (number)
        (string))
      (comment)
      (comment)
      (comment)
      (set_statement
        (variable
          (identifier))
        (string))
      (command_statement
        (number)
        (variable
          (identifier)))
      (comment)
      (comment)
      (set_statement
        (variable
          (identifier))
        (string))
      (command_statement
        (identifier)
        (variable
          (identifier))
        (identifier)))))

=============================================================================|||
Detours
=============================================================================|||

title: Start
---
Line 1
<<detour Node2>>
Line 5
<<jump VisitCountTest>>
===
title: Node2
---
Line 2
<<detour {"Node3"}>>
Line 4
===
title: Node3
---
Line 3

// Early return
<<return>>

Error: should not be seen
===
title: VisitCountTest
---
// 0 - this is the first time we have run this node
VisitCountTest: {visited_count("VisitCountTest")} 
<<detour VisitCountTest2>>
Error: We should not see this
===
title: VisitCountTest2
---
// still 0 - we detoured into this node but have not yet 'left' VisitCountTest
VisitCountTest: {visited_count("VisitCountTest")} 

<<jump VisitCountTest3>>
===
title: VisitCountTest3
---
// now both 1 - we unwound the call stack when we jumped out of VisitCountTest2, thus exiting both nodes
VisitCountTest: {visited_count("VisitCountTest")} 
VisitCountTest2: {visited_count("VisitCountTest2")} 
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (jump_statement
        (identifier))
      (line_statement
        (text))
      (jump_statement
        (identifier))))
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (jump_statement
        (string))
      (line_statement
        (text))))
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (comment)
      (return_statement)
      (line_statement
        (text))))
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (line_statement
        (text)
        (function_call
          (identifier)
          (arguments
            (string))))
      (jump_statement
        (identifier))
      (line_statement
        (text))))
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (line_statement
        (text)
        (function_call
          (identifier)
          (arguments
            (string))))
      (jump_statement
        (identifier))))
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (line_statement
        (text)
        (function_call
          (identifier)
          (arguments
            (string))))
      (line_statement
        (text)
        (function_call
          (identifier)
          (arguments
            (string)))))))

=============================================================================|||
Enums
=============================================================================|||

title: Start
---

// Create a new enum, "Food". Variables of this type can store one of these
// three cases:
<<enum Food>>
    <<case Apple>>
    <<case Orange>>
    <<case Pear>>
<<endenum>>

// Declare a new variable, of this type.
<<declare $favouriteFood = Food.Apple as Food>>

// The 'as Food' can be left out, because the compiler will figure it out
<<declare $secondFavouriteFood = Food.Orange>>

// The 'Food' can be left out too, because the compiler will figure it out
<<declare $thirdFavouriteFood = .Pear>>

// Enum variables can be compared to each other
<<if $favouriteFood == Food.Apple>>
    I like apples!
<<elseif $favouriteFood == Food.Orange>>
    It's an error if you see this!
<<else>>
    It's an error if you see this!
<<endif>>

<<if $secondFavouriteFood == Food.Orange>>
    Oranges are okay in a pinch!
<<else>>
    It's an error if you see this!
<<endif>>

// Enum variables can be modified, just like all other variables
<<set $favouriteFood to Food.Orange>>

// (Just checking that we're not just evaluating all comparisons as true
// lol)
<<if $favouriteFood == Food.Apple>>
    It's an error if you see this!
<<elseif $favouriteFood != Food.Orange>>
    It's an error if you see this!
<<else>>
    I like oranges now!
<<endif>>

// You can skip the enum name if Yarn can infer the enum that it came from
<<set $favouriteFood to .Pear>>

// Yarn can infer the type of an implicitly declared variable, too:
<<set $aDifferentFood = .Apple>>

// Declare two new enums that have explicit raw values: one of numbers, and
// one of strings

<<enum Planets>>
    <<case Mercury = 1>>
    <<case Venus = 2>>
    <<case Earth = 3>>
    <<case Mars = 4>>
    <<case Jupiter = 5>>
    <<case Saturn = 6>>
    <<case Uranus = 7>>
    <<case Neptune = 8>>
<<endenum>>

<<enum QuestObjectives>>
    <<case Objective1 = "DoObjective1">>
    <<case Objective2 = "DoObjective2">>
    <<case Objective3 = "DoObjective3">>
<<endenum>>

<<if string(QuestObjectives.Objective1) == "DoObjective1">>
    ok 1
<<else>>
    error
<<endif>>

<<if number(Planets.Earth) == 3>>
    ok 2
<<else>>
    error
<<endif>>

===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (comment)
      (enum_statement
        (identifier)
        (enum_case_statement
          (identifier))
        (enum_case_statement
          (identifier))
        (enum_case_statement
          (identifier)))
      (comment)
      (declare_statement
        (variable
          (identifier))
        (member_expression
          (identifier)
          (identifier))
        (identifier))
      (comment)
      (declare_statement
        (variable
          (identifier))
        (member_expression
          (identifier)
          (identifier)))
      (comment)
      (declare_statement
        (variable
          (identifier))
        (member_expression
          (identifier)))
      (comment)
      (if_statement
        (binary_expression
          (variable
            (identifier))
          (member_expression
            (identifier)
            (identifier)))
        (block
          (line_statement
            (text)))
        (else_if_clause
          (binary_expression
            (variable
              (identifier))
            (member_expression
              (identifier)
              (identifier)))
          (block
            (line_statement
              (text)))
          (else_clause
            (block
              (line_statement
                (text))))))
      (if_statement
        (binary_expression
          (variable
            (identifier))
          (member_expression
            (identifier)
            (identifier)))
        (block
          (line_statement
            (text)))
        (else_clause
          (block
            (line_statement
              (text)))))
      (comment)
      (set_statement
        (variable
          (identifier))
        (member_expression
          (identifier)
          (identifier)))
      (comment)
      (comment)
      (if_statement
        (binary_expression
          (variable
            (identifier))
          (member_expression
            (identifier)
            (identifier)))
        (block
          (line_statement
            (text)))
        (else_if_clause
          (binary_expression
            (variable
              (identifier))
            (member_expression
              (identifier)
              (identifier)))
          (block
            (line_statement
              (text)))
          (else_clause
            (block
              (line_statement
                (text))))))
      (comment)
      (set_statement
        (variable
          (identifier))
        (member_expression
          (identifier)))
      (comment)
      (set_statement
        (variable
          (identifier))
        (member_expression
          (identifier)))
      (comment)
      (comment)
      (enum_statement
        (identifier)
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number))
        (enum_case_statement
          (identifier)
          (number)))
      (enum_statement
        (identifier)
        (enum_case_statement
          (identifier)
          (string))
        (enum_case_statement
          (identifier)
          (string))
        (enum_case_statement
          (identifier)
          (string)))
      (if_statement
        (binary_expression
          (function_call
            (identifier)
            (arguments
              (member_expression
                (identifier)
                (identifier))))
          (string))
        (block
          (line_statement
            (text)))
        (else_clause
          (block
            (line_statement
              (text)))))
      (if_statement
        (binary_expression
          (function_call
            (identifier)
            (arguments
              (member_expression
                (identifier)
                (identifier))))
          (number))
        (block
          (line_statement
            (text)))
        (else_clause
          (block
            (line_statement
              (text))))))))

=============================================================================|||
Functions
=============================================================================|||

title: Start
---
// Function tests

// "add_three_operands" is a function that adds three operands together

{add_three_operands(1, 2, 4*1)}

// function calls as parameters

{add_three_operands(1, 2, add_three_operands(1,2,3))}
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (comment)
      (line_statement
        (function_call
          (identifier)
          (arguments
            (number)
            (number)
            (binary_expression
              (number)
              (number)))))
      (comment)
      (line_statement
        (function_call
          (identifier)
          (arguments
            (number)
            (number)
            (function_call
              (identifier)
              (arguments
                (number)
                (number)
                (number)))))))))

=============================================================================|||
IfStatements
=============================================================================|||

title: Start
---
<<if true>>
    Player: Hey, Sally. #line:794945
    Sally: Oh! Hi. #line:2dc39b
    Sally: You snuck up on me. #line:34de2f
    Sally: Don't do that. #line:dcc2bc
<<else>>
    Player: Hey. #line:a8e70c
    Sally: Hi. #line:305cde
<<endif>>
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (if_statement
        (boolean)
        (block
          (line_statement
            (text)
            (hashtag))
          (line_statement
            (text)
            (hashtag))
          (line_statement
            (text)
            (hashtag))
          (line_statement
            (text)
            (hashtag)))
        (else_clause
          (block
            (line_statement
              (text)
              (hashtag))
            (line_statement
              (text)
              (hashtag))))))))

=============================================================================|||
InlineExpressions
=============================================================================|||

title: Start
---

<<declare $var = "">>

<<set $var to "variable">>

// Test (numbers, expressions, strings, bools, variables) in (commands, shortcut options, regular options, lines)

// Lines
Number: {1}
Expression: {1+1}
String: {"string"}
Bool: {true}
Variable: {$var}

// Lines with the expresion at the start (issue #243)
{$var} is great!

// Options
-> Option Number: {1}
-> Option Expression: {1+1}
-> Option String: {"string"}
-> Option Bool: {true}
-> Option Variable: {$var}

// Commands
<<number {1}>>
<<expression {1+1}>>
<<string {"string"}>>
<<bool {true}>>
<<variable {$var}>>

===
title: Destination
---
// no-op; required because the test plan will select 
// an option at the end of 'Start' and they all end up here
<<stop>>
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (declare_statement
        (variable
          (identifier))
        (string))
      (set_statement
        (variable
          (identifier))
        (string))
      (comment)
      (comment)
      (line_statement
        (text)
        (number))
      (line_statement
        (text)
        (binary_expression
          (number)
          (number)))
      (line_statement
        (text)
        (string))
      (line_statement
        (text)
        (boolean))
      (line_statement
        (text)
        (variable
          (identifier)))
      (comment)
      (line_statement
        (variable
          (identifier))
        (text))
      (comment)
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)
            (number)))
        (shortcut_option
          (option_line
            (text)
            (binary_expression
              (number)
              (number))))
        (shortcut_option
          (option_line
            (text)
            (string)))
        (shortcut_option
          (option_line
            (text)
            (boolean)))
        (shortcut_option
          (option_line
            (text)
            (variable
              (identifier)))))
      (comment)
      (command_statement
        (identifier)
        (number))
      (command_statement
        (identifier)
        (binary_expression
          (number)
          (number)))
      (command_statement
        (identifier)
        (string))
      (command_statement
        (identifier)
        (boolean))
      (command_statement
        (identifier)
        (variable
          (identifier)))))
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (comment)
      (command_statement
        (identifier)))))

=============================================================================|||
Jumps
=============================================================================|||

title: Start
---
Start
// Jump to a node name
<<jump NodeNameDestination>>
Error! This line should not be seen.
===
title: NodeNameDestination
---
NodeNameDestination
// Jump to a node based on a constant expression
<<jump {"NodeNameConstantExpression"}>>
===
title: NodeNameConstantExpression
---
NodeNameExpression
// Jump to a node based on a non-constant expression
<<declare $myNodeName = "NodeNameVariableExpression">>
<<jump {$myNodeName}>>
===
title: NodeNameVariableExpression
---
NodeNameVariableExpression
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (comment)
      (jump_statement
        (identifier))
      (line_statement
        (text))))
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (comment)
      (jump_statement
        (string))))
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text))
      (comment)
      (declare_statement
        (variable
          (identifier))
        (string))
      (jump_statement
        (variable
          (identifier)))))
  (node
    (title_header
      (identifier))
    (body
      (line_statement
        (text)))))

=============================================================================|||
LineGroups
=============================================================================|||

title: Start
---
// Scenario: A baker is selling pies.

<<declare $knows_player = false>>
<<declare $pies_bought = 0>>

// The first time we speak to the baker, she'll say one of these two lines.
// Depending on whether or not she knows the player, a different line will run.
<<once>>
    => Baker: Hey there, friend! Made some fresh pies for you! <<if $knows_player>>
    => Baker: Hey there! Fresh pies, right out of the oven! <<if not $knows_player>>
<<endonce>>

// Choose a single line to run.
// These three will only appear if the player bought a pie earlier.
=> Baker: Want another? <<if $pies_bought > 0>>
=> Baker: How about another pie? <<if $pies_bought > 0>>
=> Baker: Another pie? <<if $pies_bought > 0>>
// This line will only appear if the player bought a pie AND the baker already knows us.
=> Baker: Another pie for my best customer? <<if $knows_player && $pies_bought > 0>>
// These lines can always appear.
=> Baker: What d'ya say?
=> Baker: How about it?
=> Baker: Want one?

-> Buy Pie
    => Baker: Thank you kindly!
    => Baker: Pleasure doin' business with you!
    => Baker: Enjoy!
    <<set $pies_bought += 1>>
-> Don't Buy Pie
    => Baker: Aw, that's a shame!
    => Baker: Dang, no sale today!
    => Baker: Come back another time, then!

===
title: BakerSeesPlayer
---
=> Baker: Hey there!
=> Baker: Fresh pies!
=> Baker: Fresh and hot pies!
=> Baker: Popular pies! <<if $pies_bought > 2>>
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (declare_statement
        (variable
          (identifier))
        (boolean))
      (declare_statement
        (variable
          (identifier))
        (number))
      (comment)
      (comment)
      (once_statement
        (once_primary_clause
          (line_group_statement
            (line_group_item
              (line_statement
                (text)
                (line_condition
                  (variable
                    (identifier)))))
            (line_group_item
              (line_statement
                (text)
                (line_condition
                  (unary_expression
                    (variable
                      (identifier)))))))))
      (comment)
      (comment)
      (line_group_statement
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (binary_expression
                (variable
                  (identifier))
                (number)))))
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (binary_expression
                (variable
                  (identifier))
                (number)))))
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (binary_expression
                (variable
                  (identifier))
                (number)))))
        (comment)
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (binary_expression
                (variable
                  (identifier))
                (binary_expression
                  (variable
                    (identifier))
                  (number))))))
        (comment)
        (line_group_item
          (line_statement
            (text)))
        (line_group_item
          (line_statement
            (text)))
        (line_group_item
          (line_statement
            (text))))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text))
          (line_group_statement
            (line_group_item
              (line_statement
                (text)))
            (line_group_item
              (line_statement
                (text)))
            (line_group_item
              (line_statement
                (text))))
          (set_statement
            (variable
              (identifier))
            (number)))
        (shortcut_option
          (option_line
            (text))
          (line_group_statement
            (line_group_item
              (line_statement
                (text)))
            (line_group_item
              (line_statement
                (text)))
            (line_group_item
              (line_statement
                (text))))))))
  (node
    (title_header
      (identifier))
    (body
      (line_group_statement
        (line_group_item
          (line_statement
            (text)))
        (line_group_item
          (line_statement
            (text)))
        (line_group_item
          (line_statement
            (text)))
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (binary_expression
                (variable
                  (identifier))
                (number)))))))))

=============================================================================|||
Once
=============================================================================|||

title: Start
---
<<once>>
    This content is only seen once.
<<else>>
    This content is seen on all other occasions.
<<endonce>>

<<once if $conditionA>>
    This content is only seen once, and only if $conditionA is true.
<<endonce>>

-> Option 1 <<once if $conditionB>> // only selectable once, and only if $conditionB is true
-> Option 2 <<once>> // only selectable once
-> Option 3 <<if $conditionB>> // only selectable if $conditionB is true
-> Option 4 // always selectable

=> Item 1 <<once>> // will only appear once
=> Item 2 <<once if $conditionC>> // will only appear once, and only if $conditionC is true
=> Item 3 <<if $conditionC>> // will only appear if $conditionC is true
=> Item 4 // may always appear

Line 1 <<once>> // line will only run once
Line 2 <<once if $conditionD>> // line will only run once, and only if $conditionD is true
Line 3 <<if $conditionD>> // line will only run if $conditionD is true
Line 4 // line will always run
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (once_statement
        (once_primary_clause
          (line_statement
            (text)))
        (once_alternate_clause
          (line_statement
            (text))))
      (once_statement
        (variable
          (identifier))
        (once_primary_clause
          (line_statement
            (text))))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)
            (line_condition
              (variable
                (identifier)))
            (comment)))
        (shortcut_option
          (option_line
            (text)
            (line_condition)
            (comment)))
        (shortcut_option
          (option_line
            (text)
            (line_condition
              (variable
                (identifier)))
            (comment)))
        (shortcut_option
          (option_line
            (text))))
      (line_group_statement
        (line_group_item
          (line_statement
            (text)
            (line_condition)
            (comment)))
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (variable
                (identifier)))
            (comment)))
        (line_group_item
          (line_statement
            (text)
            (line_condition
              (variable
                (identifier)))
            (comment)))
        (line_group_item
          (line_statement
            (text))))
      (line_statement
        (text)
        (line_condition)
        (comment))
      (line_statement
        (text)
        (line_condition
          (variable
            (identifier)))
        (comment))
      (line_statement
        (text)
        (line_condition
          (variable
            (identifier)))
        (comment))
      (line_statement
        (text)))))

=============================================================================|||
ShortcutOptions
=============================================================================|||

title: Start
---
// Testing options

// Expect 3 options (the second one in the following group of three will be
// marked as disabled) and select the first one

<<declare $selected = 0>>

-> Option 1
	<<set $selected += 1>>
	This line should appear.
	-> Sub Option 1
		// should be selected
		This line should also appear.
		<<set $selected += 1>>
	-> Sub Option 2
	-> Sub Option 3 <<if false>>
-> Option 2 <<if false>>
	This line should not appear.
-> Option 3
	This line should not appear.

// Test two shortcut options with no text

Bea: line text
-> option1
-> option2
Bea: line text2


	Bea: indented line text
	-> indented option1
	-> indented option2
	Bea: indented line text2


Bea: line text
	->indented option1 following unindented line
	->indented option2 following unindented line
		option2.1
		option2.2
		option2.3
		option2.4

// Single-character shortcut options
-> A
	B

// Shortcut options and line tags should work regardless of whitespace

// No whitespace between condition and line tag
-> Option A <<if true>>#line:0e8a7ce
-> Option B #line:0405c66

// Whitespace between condition and line tag
-> Option A <<if true>> #line:0e8a7cd
-> Option B #line:0405c67

// Single-line shortcut options inside an indented context
<<if true>>
    -> Option1
<<else>>
    -> Option2
<<endif>>

===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (comment)
      (comment)
      (declare_statement
        (variable
          (identifier))
        (number))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text))
          (set_statement
            (variable
              (identifier))
            (number))
          (line_statement
            (text))
          (shortcut_option_statement
            (shortcut_option
              (option_line
                (text))
              (comment)
              (line_statement
                (text))
              (set_statement
                (variable
                  (identifier))
                (number)))
            (shortcut_option
              (option_line
                (text)))
            (shortcut_option
              (option_line
                (text)
                (line_condition
                  (boolean))))))
        (shortcut_option
          (option_line
            (text)
            (line_condition
              (boolean)))
          (line_statement
            (text)))
        (shortcut_option
          (option_line
            (text))
          (line_statement
            (text))))
      (comment)
      (line_statement
        (text))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)))
        (shortcut_option
          (option_line
            (text))))
      (line_statement
        (text))
      (line_statement
        (text))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)))
        (shortcut_option
          (option_line
            (text))))
      (line_statement
        (text))
      (line_statement
        (text))
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)))
        (shortcut_option
          (option_line
            (text))
          (line_statement
            (text))
          (line_statement
            (text))
          (line_statement
            (text))
          (line_statement
            (text))))
      (comment)
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text))
          (line_statement
            (text))))
      (comment)
      (comment)
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)
            (line_condition
              (boolean))
            (hashtag)))
        (shortcut_option
          (option_line
            (text)
            (hashtag))))
      (comment)
      (shortcut_option_statement
        (shortcut_option
          (option_line
            (text)
            (line_condition
              (boolean))
            (hashtag)))
        (shortcut_option
          (option_line
            (text)
            (hashtag))))
      (comment)
      (if_statement
        (boolean)
        (block
          (shortcut_option_statement
            (shortcut_option
              (option_line
                (text)))))
        (else_clause
          (block
            (shortcut_option_statement
              (shortcut_option
                (option_line
                  (text))))))))))

=============================================================================|||
Types
=============================================================================|||

title: Start
---
// Testing types

// string equality
{"test" == "test"}
{"test" eq "test"}

// string case sensitivity
{"hi" != "HI"}
{"hi" neq "HI"}

// gt test
{3 > 2}
{3 gt 2}

// lt test
{1 < 2}
{1 lt 2}

// lte test
{2 <= 2}
{2 lte 2}

// gte test
{2 >= 2}
{2 gte 2}
===

-----------------------------------------------------------------------------|||

(dialogue
  (node
    (title_header
      (identifier))
    (body
      (comment)
      (comment)
      (line_statement
        (binary_expression
          (string)
          (string)))
      (line_statement
        (binary_expression
          (string)
          (string)))
      (comment)
      (line_statement
        (binary_expression
          (string)
          (string)))
      (line_statement
        (binary_expression
          (string)
          (string)))
      (comment)
      (line_statement
        (binary_expression
          (number)
          (number)))
      (line_statement
        (binary_expression
          (number)
          (number)))
      (comment)
      (line_statement
        (binary_expression
          (number)
          (number)))
      (line_statement
        (binary_expression
          (number)
          (number)))
      (comment)
      (line_statement
        (binary_expression
          (number)
          (number)))
      (line_statement
        (binary_expression
          (number)
          (number)))
      (comment)
      (line_statement
        (binary_expression
          (number)
          (number)))
      (line_statement
        (binary_expression
          (number)
          (number))))))
